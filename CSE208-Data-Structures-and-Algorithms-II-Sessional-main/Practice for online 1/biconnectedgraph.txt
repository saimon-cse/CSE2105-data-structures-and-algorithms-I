bool Graph::BCUtil(int u, bool visited[], int discovery[], int low[], int parent[])
{
    static int time = 0;
    int children = 0;
    visited[u] = true;
    time++;
    low[u] = time;
    discovery[u] = time;

    for(int i=0; i<AdjList[u].getLength(); i++)
    {
        int v = AdjList[u].getItem(i);
        if(!visited[v])
        {
            children++;
            parent[v] = u;
            if(BCUtil(v, visited, discovery, low, parent))
                return true;

            low[u] = min(low[u], low[v]);

            if(parent[u]==NULL_VALUE && children>1)
                return true;
            if(parent[u]!=NULL_VALUE && low[v]>=discovery[u])
                return true;
        }
        else if(v != parent[u])
            low[u] = min(low[u], discovery[v]);
    }
    return false;
}

bool Graph::isBC()
{
    bool *visited = new bool[nVertices];
    int *parent = new int[nVertices];
    int *discovery = new int[nVertices];
    int *low = new int[nVertices];

    for(int i=0; i<nVertices; i++)
    {
        parent[i] = NULL_VALUE;
        visited[i] = false;
    }

    if(BCUtil(0, visited, discovery, low, parent)==true)
        return false;

    for(int i=0; i<nVertices; i++)
        if(visited[i]==false)
            return false;

    return true;
}