void Graph::APUtil(int u, bool visited[], int discovery[], int low[], int parent[], bool ap[])
{
    static int time = 0;
    int children = 0;
    visited[u] = true;
    time++;
    discovery[u] = time;
    low[u] = time;

    for(int i=0; i<AdjList[u].getLength(); i++)
    {
        int v = AdjList[u].getItem(i);

        if(!visited[v])
        {
            children++;
            parent[v] = u;
            APUtil(v, visited, discovery, low, parent, ap);

            low[u] = min(low[u], low[v]);

            if(parent[u]==NULL_VALUE && children>1)
                {
                    ap[u] = true;
                    if(u==0)
                        cout<<"ok1"<<endl;

                }

            if(parent[u]!=NULL_VALUE && low[v]>=discovery[u])
                {
                    ap[u] = true;
                    if(u==0){
                        cout<<"ok2"<<endl;
                        cout<<time<<endl;}
                }
        }

        else if(v != parent[u])
            low[u] = min(low[u], discovery[v]);
    }
}

void Graph::Ap()
{
    bool *visited = new bool[nVertices];
    int *parent = new int[nVertices];
    int *low = new int[nVertices];
    int *discovery = new int[nVertices];
    bool *ap = new bool[nVertices];

    for(int i=0; i<nVertices; i++)
    {
        visited[i] = false;
        parent[i] = NULL_VALUE;
        ap[i] = false;
    }

    for(int i=0; i<nVertices; i++)
    {
        if(visited[i]==false)
            APUtil(i, visited, discovery, low, parent, ap);
    }

    for(int i=0; i<nVertices; i++)
    {
        if(ap[i]==true)
            cout<<i<<" ";
    }
}